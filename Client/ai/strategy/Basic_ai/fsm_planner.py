##
## EPITECH PROJECT, 2025
## Zappy
## File description:
## fsm_planner - Planificateur FSM am√©lior√© avec coordination optimis√©e
##

import time
from typing import Optional, Any, Dict
from ai.strategy.fsm import StateMachine, Event, StateFactory
from ai.strategy.fsm_event import EventDetector
from ai.strategy.state.emergency import EmergencyState
from ai.strategy.state.collect_food import CollectFoodState
from ai.strategy.state.collect_resources import CollectResourcesState
from ai.strategy.state.explore import ExploreState
from ai.strategy.state.incantation import IncantationState
from ai.strategy.state.reproduction import ReproductionState
from ai.strategy.state.coordination_incantation import CoordinateIncantationState
from ai.strategy.state.wait_incantation import WaitIncantationState
from utils.logger import logger
from config import Constants
from constant import (
    FoodThresholds, IncantationRequirements, AgentRoles, CoordinationMessages,
    StateTransitionThresholds, GameplayConstants, ReproductionConstants,
    CoordinationStrategy
)


class FSMPlanner:
    """
    Planificateur FSM avec coordination d'incantation optimis√©e.
    """

    def __init__(self, command_manager, game_state, message_bus):
        """Initialisation du FSMPlanner avec coordination am√©lior√©e."""
        self.cmd_mgr = command_manager
        self.state = game_state
        self.bus = message_bus

        self.agent_thread = getattr(game_state, 'agent_thread', None)
        if self.agent_thread is None:
            logger.warning("[FSMPlanner] Aucun agent_thread trouv√© - reproduction limit√©e")

        self.event_detector = EventDetector(self.state)

        self.context = {
            'current_target': None,
            'command_queue': [],
            'stuck_counter': 0,
            'last_position': None,
            'needs_vision_update': False,
            'needs_inventory_check': False,
            'last_inventory_time': time.time(),
            'last_vision_time': time.time(),
            'can_incant': False,
            'should_reproduce': False,
            'last_level': self.state.level,
            'coordination_failures': 0,
            'last_coordination_attempt': 0.0,
            'forced_exploration_until': 0.0
        }

        self._update_food_thresholds()

        initial_state = self._determine_initial_state()
        self.fsm = StateMachine(initial_state)

        self.decision_count = 0
        self.last_state_change = time.time()
        self.last_level_check = self.state.level

        logger.info(f"[FSMPlanner] FSM optimis√© initialis√© avec √©tat: {self.fsm.get_current_state_name()}")

    def _determine_initial_state(self):
        """D√©termine l'√©tat initial selon la situation actuelle avec logique optimis√©e."""
        current_food = self.state.get_food_count()

        # Urgence alimentaire
        if current_food <= StateTransitionThresholds.FOOD_EMERGENCY_THRESHOLD:
            logger.warning(f"[FSMPlanner] D√©marrage mode URGENCE (food: {current_food})")
            return EmergencyState(self)

        # Reproduction prioritaire pour niveau 2+
        if self._should_attempt_reproduction():
            logger.info(f"[FSMPlanner] D√©marrage reproduction (niveau {self.state.level})")
            return ReproductionState(self)

        # Collecte de nourriture si insuffisante
        if current_food <= StateTransitionThresholds.FOOD_LOW_THRESHOLD:
            logger.info(f"[FSMPlanner] D√©marrage collecte nourriture (food: {current_food})")
            return CollectFoodState(self)

        # Incantation si possible
        if self._can_attempt_incantation():
            if self.state.level == 1:
                logger.info("[FSMPlanner] D√©marrage incantation solo (niveau 1)")
                return IncantationState(self)
            else:
                logger.info(f"[FSMPlanner] D√©marrage coordination (niveau {self.state.level})")
                return CoordinateIncantationState(self)

        # Collecte de ressources si manquantes
        if self.state.has_missing_resources():
            logger.info("[FSMPlanner] D√©marrage collecte ressources")
            return CollectResourcesState(self)

        # Exploration par d√©faut
        logger.info(f"[FSMPlanner] D√©marrage exploration (food: {current_food})")
        return ExploreState(self)

    def _can_attempt_incantation(self) -> bool:
        """V√©rification optimis√©e pour l'incantation."""
        if self.state.level >= GameplayConstants.MAX_LEVEL:
            return False

        # V√©rifier les ressources
        requirements = IncantationRequirements.REQUIRED_RESOURCES.get(self.state.level, {})
        if not requirements:
            return False
            
        inventory = self.state.get_inventory()
        for resource, needed in requirements.items():
            if inventory.get(resource, 0) < needed:
                return False

        # V√©rifier la nourriture selon le niveau
        current_food = self.state.get_food_count()
        if self.state.level == 1:
            min_food_required = StateTransitionThresholds.MIN_FOOD_FOR_LEVEL_1_INCANTATION
        else:
            min_food_required = StateTransitionThresholds.MIN_FOOD_FOR_COORDINATION
            
        return current_food >= min_food_required

    def _should_attempt_reproduction(self) -> bool:
        """V√©rifie si on devrait tenter une reproduction avec priorit√© √©lev√©e."""
        if self.state.level < ReproductionConstants.MIN_LEVEL_FOR_REPRODUCTION:
            return False

        min_food_for_fork = self._get_min_food_for_reproduction()
        if self.state.get_food_count() < min_food_for_fork:
            return False

        # Priorit√© absolue pour la reproduction apr√®s level up
        if getattr(self.state, 'needs_repro', False):
            return True

        # Reproduction automatique pour niveau 2
        return self.state.level == 2

    def _get_min_food_for_reproduction(self) -> int:
        """Calcule la nourriture minimale pour une reproduction."""
        base = ReproductionConstants.MIN_FOOD_FOR_FORK_BASE
        if self.state.level >= 3:
            return int(base * 1.2)  # R√©duit le multiplicateur
        return base

    def _update_food_thresholds(self):
        """Met √† jour les seuils de nourriture selon le niveau."""
        level = self.state.level
        if level >= 7:
            multiplier = FoodThresholds.MULTIPLIER_HIGH_LEVEL
        elif level >= 4:
            multiplier = FoodThresholds.MULTIPLIER_MID_LEVEL
        else:
            multiplier = FoodThresholds.MULTIPLIER_LOW_LEVEL

        self.food_thresholds = {
            'critical': int(FoodThresholds.BASE_CRITICAL * multiplier),
            'safe': int(FoodThresholds.BASE_SAFE * multiplier),
            'abundant': int(FoodThresholds.BASE_ABUNDANT * multiplier),
            'exploration_return': int(FoodThresholds.BASE_EXPLORATION_THRESHOLD * multiplier),
            'coordination': int(FoodThresholds.BASE_COORDINATION_THRESHOLD * multiplier)
        }

        logger.debug(f"[FSMPlanner] Seuils niveau {level}: {self.food_thresholds}")

    def decide_next_action(self) -> Optional[Any]:
        """Point d'entr√©e principal avec coordination optimis√©e."""
        self.decision_count += 1

        if not self._can_make_decision():
            return None

        try:
            current_time = time.time()

            # Gestion du changement de niveau
            if self.state.level != self.last_level_check:
                self._on_level_change()

            self._update_food_thresholds()

            # Gestion sp√©ciale des √©tats de reproduction termin√©e
            if self._should_transition_from_reproduction():
                return None

            # V√©rification si on est en exploration forc√©e
            if self._is_in_forced_exploration():
                return None

            # D√©tection d'√©v√©nements
            events = self.event_detector.detect_events()
            self._handle_events(events)

            # V√©rification des opportunit√©s de progression
            self._check_progression_opportunities()

            action = self.fsm.run()

            return action

        except Exception as e:
            logger.error(f"[FSMPlanner] Erreur lors de la d√©cision: {e}")
            return self.cmd_mgr.look()

    def _check_progression_opportunities(self):
        """V√©rification optimis√©e des opportunit√©s de progression."""
        current_state_name = self.fsm.get_current_state_name()
        current_time = time.time()

        # Ne pas interrompre certains √©tats critiques
        if current_state_name in ['IncantationState', 'EmergencyState', 'ReproductionState']:
            return

        # √âviter les boucles de coordination
        if (current_state_name == 'CoordinateIncantationState' and 
            current_time - self.last_state_change < CoordinationStrategy.COORDINATION_RETRY_COOLDOWN):
            return

        # Priorit√© 1: Reproduction apr√®s level up
        if self._should_attempt_reproduction() and current_state_name != 'ReproductionState':
            logger.info("[FSMPlanner] üë∂ PRIORIT√â: Transition vers reproduction")
            new_state = ReproductionState(self)
            self.fsm.transition_to(new_state)
            self.last_state_change = current_time
            return

        # Priorit√© 2: Incantation si possible
        if self._can_attempt_incantation():
            # V√©rifier si on n'a pas trop √©chou√© r√©cemment en coordination
            if (self.state.level > 1 and 
                self.context['coordination_failures'] < CoordinationStrategy.MAX_COORDINATION_ATTEMPTS and
                current_time - self.context['last_coordination_attempt'] > CoordinationStrategy.COORDINATION_RETRY_COOLDOWN):
                
                required_players = IncantationRequirements.REQUIRED_PLAYERS.get(self.state.level, 1)
                
                if self.state.level == 1:
                    logger.info("[FSMPlanner] üîÆ TRANSITION vers incantation solo (niveau 1)")
                    new_state = IncantationState(self)
                elif required_players > 1:
                    logger.info(f"[FSMPlanner] ü§ù TRANSITION vers coordination (niveau {self.state.level})")
                    new_state = CoordinateIncantationState(self)
                    self.context['last_coordination_attempt'] = current_time
                else:
                    logger.info("[FSMPlanner] üîÆ TRANSITION vers incantation directe")
                    new_state = IncantationState(self)
                
                self.fsm.transition_to(new_state)
                self.last_state_change = current_time
                return

        # Priorit√© 3: Collecte de ressources si manquantes et assez de nourriture
        current_food = self.state.get_food_count()
        if (current_food >= StateTransitionThresholds.FOOD_LOW_THRESHOLD and 
            self.state.has_missing_resources() and 
            current_state_name != 'CollectResourcesState'):
            
            missing = self._get_missing_resources()
            logger.info(f"[FSMPlanner] ‚öíÔ∏è TRANSITION vers collecte ressources: {missing}")
            new_state = CollectResourcesState(self)
            self.fsm.transition_to(new_state)
            self.last_state_change = current_time
            return

    def _get_missing_resources(self) -> dict:
        """Retourne les ressources manquantes pour l'incantation."""
        requirements = IncantationRequirements.REQUIRED_RESOURCES.get(self.state.level, {})
        inventory = self.state.get_inventory()
        missing = {}
        for resource, needed in requirements.items():
            current = inventory.get(resource, 0)
            if current < needed:
                missing[resource] = needed - current
        return missing

    def _should_transition_from_reproduction(self) -> bool:
        """D√©tecte si on doit sortir de l'√©tat de reproduction."""
        current_state_name = self.fsm.get_current_state_name()

        if current_state_name != 'ReproductionState':
            return False

        current_state = self.fsm.state
        
        # V√©rifier si la reproduction est termin√©e
        is_complete = (
            (hasattr(current_state, 'is_reproduction_complete') and current_state.is_reproduction_complete()) or
            (hasattr(current_state, 'fork_stage') and current_state.fork_stage == 4)
        )

        if is_complete:
            logger.info("[FSMPlanner] üéâ Reproduction termin√©e, transition")
            self._transition_after_reproduction()
            return True

        return False

    def _transition_after_reproduction(self):
        """G√®re la transition apr√®s reproduction termin√©e avec priorit√©s optimis√©es."""
        current_food = self.state.get_food_count()

        # Priorit√© 1: Urgence alimentaire
        if current_food <= StateTransitionThresholds.FOOD_EMERGENCY_THRESHOLD:
            logger.warning("[FSMPlanner] ‚Üí Emergency apr√®s reproduction")
            new_state = EmergencyState(self)
        
        # Priorit√© 2: Incantation si possible et ressources compl√®tes
        elif self._can_attempt_incantation():
            if self.state.level == 1:
                logger.info("[FSMPlanner] ‚Üí Incantation solo apr√®s reproduction")
                new_state = IncantationState(self)
            else:
                logger.info("[FSMPlanner] ‚Üí Coordination apr√®s reproduction")
                new_state = CoordinateIncantationState(self)
        
        # Priorit√© 3: Collecte selon les besoins
        elif current_food <= StateTransitionThresholds.FOOD_LOW_THRESHOLD:
            logger.info("[FSMPlanner] ‚Üí Collecte nourriture apr√®s reproduction")
            new_state = CollectFoodState(self)
        elif self.state.has_missing_resources():
            logger.info("[FSMPlanner] ‚Üí Collecte ressources apr√®s reproduction")
            new_state = CollectResourcesState(self)
        
        # Priorit√© 4: Exploration
        else:
            logger.info("[FSMPlanner] ‚Üí Exploration apr√®s reproduction")
            new_state = ExploreState(self)

        self.fsm.transition_to(new_state)
        self.last_state_change = time.time()

    def _on_level_change(self):
        """G√®re le changement de niveau avec actions appropri√©es."""
        old_level = self.last_level_check
        new_level = self.state.level

        logger.info(f"[FSMPlanner] üÜô LEVEL UP! {old_level} ‚Üí {new_level}")
        self.last_level_check = new_level

        # Priorit√© reproduction pour niveau 2+
        if new_level >= 2 and not getattr(self.state, 'needs_repro', False):
            logger.info(f"[FSMPlanner] D√©clenchement reproduction prioritaire niveau {new_level}")
            self.state.needs_repro = True
            self.context['should_reproduce'] = True

        # Reset des √©checs de coordination pr√©c√©dents
        self.context['coordination_failures'] = 0

    def _is_in_forced_exploration(self) -> bool:
        """V√©rifie si on est en p√©riode d'exploration forc√©e."""
        current_time = time.time()
        return current_time < self.context['forced_exploration_until']

    def _force_exploration(self, duration: float):
        """Force l'exploration pendant une dur√©e donn√©e."""
        self.context['forced_exploration_until'] = time.time() + duration
        current_state_name = self.fsm.get_current_state_name()
        
        if current_state_name != 'ExploreState':
            logger.info(f"[FSMPlanner] üîÑ Exploration forc√©e ({duration}s)")
            new_state = ExploreState(self)
            self.fsm.transition_to(new_state)
            self.last_state_change = time.time()

    def _can_make_decision(self) -> bool:
        """V√©rifie si on peut prendre une d√©cision."""
        if self.state.command_already_send:
            return False

        if self.cmd_mgr.get_pending_count() >= GameplayConstants.MAX_PENDING_COMMANDS:
            return False

        return True

    def _handle_events(self, events: list):
        """Gestion optimis√©e des √©v√©nements avec transitions appropri√©es."""
        current_food = self.state.get_food_count()
        current_state_name = self.fsm.get_current_state_name()

        for event in events:
            if event == Event.FOOD_EMERGENCY:
                if current_state_name != 'EmergencyState':
                    logger.warning(f"[FSMPlanner] ‚ö†Ô∏è URGENCE! Transition Emergency (food: {current_food})")
                    new_state = EmergencyState(self)
                    self.fsm.transition_to(new_state)
                    self.last_state_change = time.time()
                    break

            elif event == Event.FOOD_LOW:
                # Ne pas interrompre certains √©tats critiques
                if current_state_name not in ['EmergencyState', 'CollectFoodState', 'IncantationState', 
                                            'ReproductionState']:
                    logger.info(f"[FSMPlanner] üçñ Transition collecte nourriture (food: {current_food})")
                    new_state = CollectFoodState(self)
                    self.fsm.transition_to(new_state)
                    self.last_state_change = time.time()
                    break

            elif event == Event.FOOD_SUFFICIENT:
                if current_state_name in ['EmergencyState', 'CollectFoodState']:
                    self._transition_after_food_collection()
                    break

            elif event == Event.NEED_VISION:
                self.context['needs_vision_update'] = True

            elif event == Event.NEED_INVENTORY:
                self.context['needs_inventory_check'] = True

    def _transition_after_food_collection(self):
        """Transition optimis√©e apr√®s collecte de nourriture suffisante."""
        # Priorit√© 1: Reproduction si n√©cessaire
        if self._should_attempt_reproduction():
            new_state = ReproductionState(self)

        # Priorit√© 2: Incantation si possible
        elif self._can_attempt_incantation():
            if self.state.level == 1:
                new_state = IncantationState(self)
            else:
                new_state = CoordinateIncantationState(self)

        # Priorit√© 3: Collecte de ressources si manquantes
        elif self.state.has_missing_resources():
            new_state = CollectResourcesState(self)

        # Priorit√© 4: Exploration
        else:
            new_state = ExploreState(self)

        self.fsm.transition_to(new_state)
        self.last_state_change = time.time()

    def get_context(self) -> Dict[str, Any]:
        """Retourne le contexte partag√© entre les √©tats."""
        return self.context

    def update_context(self, key: str, value: Any):
        """Met √† jour le contexte partag√©."""
        self.context[key] = value

    def on_command_success(self, command_type, response=None):
        """Appel√© quand une commande r√©ussit."""
        self.context['stuck_counter'] = 0

        if hasattr(self.fsm.state, 'on_command_success'):
            self.fsm.state.on_command_success(command_type, response)

        if command_type.value == 'Incantation':
            logger.info(f"[FSMPlanner] üéâ INCANTATION R√âUSSIE! Nouveau niveau: {self.state.level}")
            self._on_level_change()

    def on_command_failed(self, command_type, response=None):
        """Appel√© quand une commande √©choue avec gestion am√©lior√©e."""
        self.context['stuck_counter'] += 1
        current_state_name = self.fsm.get_current_state_name()
        
        logger.warning(f"[FSMPlanner] ‚ùå √âchec {command_type}, stuck: {self.context['stuck_counter']}")

        # Gestion sp√©ciale des √©checs de coordination
        if (current_state_name == 'CoordinateIncantationState' and 
            command_type.value == 'Broadcast'):
            self.context['coordination_failures'] += 1
            logger.warning(f"[FSMPlanner] √âchec coordination {self.context['coordination_failures']}")

        # D√©blocage apr√®s trop d'√©checs
        if self.context['stuck_counter'] >= GameplayConstants.MAX_STUCK_ATTEMPTS:
            if current_state_name not in ['EmergencyState', 'IncantationState']:
                self.context['current_target'] = None
                self.context['command_queue'].clear()
                self._force_exploration(CoordinationStrategy.COORDINATION_RETRY_COOLDOWN)

        if hasattr(self.fsm.state, 'on_command_failed'):
            self.fsm.state.on_command_failed(command_type, response)

    def get_current_strategy_info(self) -> Dict[str, Any]:
        """Retourne les informations de strat√©gie optimis√©es pour debug."""
        return {
            'state': self.fsm.get_current_state_name(),
            'food_count': self.state.get_food_count(),
            'food_thresholds': self.food_thresholds,
            'level': self.state.level,
            'decisions': self.decision_count,
            'can_incant': self._can_attempt_incantation(),
            'should_reproduce': self._should_attempt_reproduction(),
            'missing_resources': self.state.has_missing_resources(),
            'coordination_failures': self.context['coordination_failures'],
            'forced_exploration': self._is_in_forced_exploration(),
            'last_state_change': time.time() - self.last_state_change,
            'required_players': IncantationRequirements.REQUIRED_PLAYERS.get(self.state.level, 1),
            'stuck_counter': self.context['stuck_counter']
        }